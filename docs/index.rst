4Subsea Documentation Template
==============================
This is a documentation template generated by Sphinx based on the `PyData Sphinx Theme`_.

The template is intended for all 4subsea Python packages, but is also suitable for 
other applications. Using this template ensures that the documentation web site
follows the 4Subsea profile. Style and format is approved by marketing, and any changes
shall be approved by marketing before published.

Requirements
------------
The landing page shall always give a brief description of the purpose. For instance,
if the documentation is for a Python package, then the overall description and the objectives
of the package is outlined using a human-friendly language.

The "logo" shall point to the landing page.

The following sections shall always be present (and displayed on the navigation bar):

* Getting Started

* User Guide

* API Reference

* *(Optional Sections)*

* Release Notes

* Support

Other optional sections may be added between **API Reference** and **Release Notes** if deemed necesseary.

Scope specific
^^^^^^^^^^^^^^
If the documenation is **4Insight** related, use "4Insight logo" and have a link to `4Insight.io`_,
located last at the right on the navigation bar.

For other cases, use "4Subsea logo".

Syntax
^^^^^^
The Sphinx documentation syntax requirements for inline text are as follows:

* code-like / object-like / file-like: ``object``, ``this = {a: 1, b=2}``, ``my_file.txt``, etc.

* object-like (w/ cross-referencing using Sphinx roles): \:mod:`my_module`, \:class:`MyClass`, \:meth:`MyClass.bar`, etc.

   - By default, these will render like this in Sphinx: :mod:`my_module`, :class:`MyClass`, :meth:`MyClass.bar`
   - Furhtermore, when objects are defined like this, they become "hyper-links" that takes the user directly to API documentation, if Sphinx is able to resolve what object it is referred to.
   - When refering to "external" libraries, make sure to add update ``conf.py`` accordingly, cf. `intersphinx`.
   - E.g. :class:`io.TextIOWrapper`

* arguments / keyword-arguments: `this_arg`, `that_kwarg`, i.e., italic.

* input values: ``object``, ``str``, ``True``, ``False``, ``None``, ``'this string'``, ``12.``, etc.


.. _PyData Sphinx Theme: https://pydata-sphinx-theme.readthedocs.io/en/latest/user_guide/index.html
.. _4Insight.io: https://4insight.io


.. toctree::
   :hidden:

   getting_started
   user_guide/index
   api_ref/index
   release_notes
   support
   other/index
   
